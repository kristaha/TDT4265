 conv_1_num_filters = 32  # Set number of filters in first conv layer
 23         #conv_2_num_filters = 
 24 
 25         # Define the convolutional layers
 26         self.feature_extractor = nn.Sequential(
 27             nn.Conv2d(
 28                 in_channels=image_channels,
 29                 out_channels=conv_1_num_filters,
 30                 kernel_size=5,
 31                 stride=1,
 32                 padding=2
 33             ),
 34             nn.ReLU(),
 35             nn.MaxPool2d(kernel_size=2, stride=2),
 36             nn.Conv2d(
 37                 in_channels=conv_1_num_filters,
 38                 out_channels=64,
 39                 kernel_size=5,
 40                 stride=1,
 41                 padding=2
 42             ),
 43             nn.ReLU(),
 44             nn.MaxPool2d(kernel_size=2, stride=2),
 45             nn.Conv2d(
 46                 in_channels=64,
 47                 out_channels=128,
 48                 kernel_size=5,
 49                 stride=1,
 50                 padding=2
 51             ),
 52             nn.ReLU(),
 53             nn.MaxPool2d(kernel_size=2, stride=2),
 54 
 55 
 56         )
 57         # The output of feature_extractor will be [batch_size, num_filters, 16, 16]
 58         self.num_output_features = 128*4*4 #Vis utreginng
 59         # Initialize our last fully connected layer
 60         # Inputs all extracted features from the convolutional layers
 61         # Outputs num_classes predictions, 1 for each class.
 62         # There is no need for softmax activation function, as this is
 63         # included with nn.CrossEntropyLoss
 64         self.classifier = nn.Sequential(
 65             nn.Linear(self.num_output_features, 64),
 66             nn.ReLU(),
 67             nn.Linear(in_features=64, out_features=num_classes),
 68         )
